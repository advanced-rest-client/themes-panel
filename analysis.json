{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "A panel to display themes installed in the application.\n\nThe element is an UI for themes logic in the application. It does not contain\nlogic to activate or discovery themes. It communicates with the application (model)\nvia custom events. See events description for more information. Note that most events\nhave to be cancelled.\n\nOnce the element is \"opened\" it queries for list of available themes, if it wasn't\nalready. When the list of themes changes call `refreshThemes()` on the element\nto update list of themes in the UI.\n\n## Theme model\n\nThe object consist with the following properties:\n\n- **name** `String` Theme id\n- **title** `String` Theme title\n- **description** `String` Theme short description.\n- **isDefault** `Boolean` True if the theme cannot be uninstalled\n- **location** `String` Theme location\n- **mainFile** `String` Location to the main file\n- **version** `{String}` Theme version number\n- **_id** `{String}` Theme datasdtore id (used to find the theme on the list\nand to be consisten with other elements. ARC doesn't actually use this property\nand it is the same as `name`).\n\n### Styling\n\n`<themes-panel>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--warning-primary-color` | Main color of the warning messages | `#FF7043`\n`--warning-contrast-color` | Contrast color for the warning color | `#fff`",
      "summary": "",
      "path": "themes-panel.js",
      "properties": [
        {
          "name": "themes",
          "type": "Array | null | undefined",
          "description": "List of themes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 19
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "activeTheme",
          "type": "string | null | undefined",
          "description": "ID of selected theme.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "noAuto",
          "type": "boolean | null | undefined",
          "description": "When set it won't check for themes list when added to the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "addEnabled",
          "type": "boolean | null | undefined",
          "description": "When set it renders input field to install a theme.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 185,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "_themeInstall",
          "type": "string | null | undefined",
          "description": "Name of the theme to install",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 189,
              "column": 6
            },
            "end": {
              "line": 189,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_installPending",
          "type": "boolean | null | undefined",
          "description": "When true the app is installing the eheme.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 6
            },
            "end": {
              "line": 193,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "isDefaultTheme",
          "type": "boolean | null | undefined",
          "description": "Computed value, true if selected theme is one of default themes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "defaultThemeName",
          "type": "string | null | undefined",
          "description": "Name of the default theme to use when installed theme is removed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"advanced-rest-client/arc-electron-default-theme\""
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 223,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 225,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_activatedHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 230,
              "column": 2
            },
            "end": {
              "line": 238,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dispatch",
          "description": "Dispatches a CustomEvent of a `type` with `detail` object.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 246,
              "column": 2
            },
            "end": {
              "line": 255,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "Event type"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "Object to attach to the event"
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dispatchListEvent",
          "description": "Dispatches `themes-list` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 2
            },
            "end": {
              "line": 262,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dispatchActiveInfoEvent",
          "description": "Dispatches `theme-active-info` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 267,
              "column": 2
            },
            "end": {
              "line": 269,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dispatchActivateEvent",
          "description": "Dispatches `theme-activate` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 275,
              "column": 2
            },
            "end": {
              "line": 279,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "theme",
              "type": "String",
              "description": "Theme ID to activate"
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dispatchInstallEvent",
          "description": "Dispatches `theme-install` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 2
            },
            "end": {
              "line": 289,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "Theme name"
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dispatchUninstallEvent",
          "description": "Dispatches `theme-uninstall` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 295,
              "column": 2
            },
            "end": {
              "line": 299,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "String",
              "description": "Theme name"
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_dispatchGaEvent",
          "description": "Dispatches GA event.\nThe event's category is `Web sockets`.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 306,
              "column": 2
            },
            "end": {
              "line": 312,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "action",
              "type": "String",
              "description": "Event action."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "refresh",
          "description": "Dispatches `themes-list` custom event to query model for the list of\navailable themes.\nThe event must be cancelled when handled (`e.preventDefault()`).\nThe list of themes should be returned as a Promise added to the `result`\nproperty of the `detail` object of the event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 2
            },
            "end": {
              "line": 337,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_processListResponse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 2
            },
            "end": {
              "line": 347,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "themes"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getActiveTheme",
          "description": "Dispatches `theme-active-info` custom event to query model for currently\nactivated theme. The model should always return theme info object, even\nif it's a default object.\n\nThe theme info object should be returned as a Promise added to the `result`\nproperty of the `detail` object of the event.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 358,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_handlePromiseError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 2
            },
            "end": {
              "line": 387,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cause"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectionChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 389,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_install",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 429,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_computeIsDefault",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 431,
              "column": 2
            },
            "end": {
              "line": 444,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "record"
            },
            {
              "name": "activeTheme"
            }
          ]
        },
        {
          "name": "_uninstall",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 446,
              "column": 2
            },
            "end": {
              "line": 467,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 70,
          "column": 0
        },
        "end": {
          "line": 523,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "UiElements.ThemesPanel",
      "attributes": [
        {
          "name": "themes",
          "description": "List of themes.",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 6
            },
            "end": {
              "line": 177,
              "column": 19
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "active-theme",
          "description": "ID of selected theme.",
          "sourceRange": {
            "start": {
              "line": 179,
              "column": 6
            },
            "end": {
              "line": 179,
              "column": 25
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "no-auto",
          "description": "When set it won't check for themes list when added to the DOM.",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 6
            },
            "end": {
              "line": 181,
              "column": 21
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "add-enabled",
          "description": "When set it renders input field to install a theme.",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 6
            },
            "end": {
              "line": 185,
              "column": 25
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-default-theme",
          "description": "Computed value, true if selected theme is one of default themes.",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 6
            },
            "end": {
              "line": 201,
              "column": 7
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "default-theme-name",
          "description": "Name of the default theme to use when installed theme is removed.",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 6
            },
            "end": {
              "line": 208,
              "column": 7
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "theme-activate",
          "description": "Dispatched when the user selected a theme to be activated.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "theme-active-info",
          "description": "Dispatched when the element requests information about currently\nactivated theme.\n\nThe element does not assume default theme. This event should always result\nwith a theme info object.\n\nThe event is cancelable and the model must cancel the event when handling\nit. Otherwise the element will ignore the result and display error.\n\nThe result should be a Promise resolved to a `Theme` objects.\nSee element description for data model. The promise must be set on `result`\nproperty of the `detail` object.\n\n## Example\n```javascript\ne.preventDefault();\ne.detail.result = Promise.resolve({...});\n```",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "theme-install",
          "description": "Dispatched when the user requests to install new theme.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "themes-list",
          "description": "Dispatched when the element requests to list currently installed themes.\nThe event is cancelable and the model must cancel the event when handling\nit. Otherwise the element will ignore the result and display error.\n\nThe result should be a Promise resolved to a list of `Theme` objects.\nSee element description for data model. The promise must be set on `result`\nproperty of the `detail` object.\n\n## Example\n```javascript\ne.preventDefault();\ne.detail.result = Promise.resolve({...});\n```",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "themes-panel"
    }
  ]
}
